import {
	analyzer,
	any,
	as,
	asc,
	assert,
	at,
	begin,
	bm25,
	_break,
	by,
	cancel,
	capacity,
	changefeed,
	changes,
	columns,
	comment,
	commit,
	content,
	_continue,
	create,
	database,
	db,
	_default,
	define,
	_delete,
	desc,
	dimension,
	dist,
	doc_ids_cache,
	doc_ids_order,
	doc_lengths_cache,
	doc_lengths_order,
	drop,
	duplicate,
	_else,
	end,
	explain,
	exists,
	event,
	fetch,
	field,
	fields,
	flexible,
	_for,
	from,
	_function,
	group,
	mtree,
	mtree_cache,
	highlights,
	_if,
	ignore,
	_in,
	index,
	info,
	insert,
	into,
	key,
	kill,
	_let,
	limit,
	live,
	merge,
	namespace,
	noindex,
	normal,
	not,
	ns,
	on,
	only,
	order,
	out,
	parallel,
	param,
	passhash,
	password,
	patch,
	permissions,
	postings_cache,
	postings_order,
	readonly,
	relate,
	relation,
	remove,
	_return,
	roles,
	root,
	sc,
	scope,
	schemafull,
	schemaless,
	search,
	select,
	session,
	set,
	show,
	since,
	signin,
	signup,
	sleep,
	split,
	start,
	structure,
	tb,
	table,
	terms_cache,
	terms_order,
	then,
	_throw,
	timeout,
	to,
	token,
	tokenizers,
	transaction,
	type,
	unique,
	unset,
	update,
	use,
	user,
	value,
	values,
	when,
	where,
	_with,

	// Literals
	after,
	before,
	diff,
	_false,
	full,
	none,
	_null,
	_true,

	f32,
	f64,
	i16,
	i32,
	i64,

	euclidean,
	cosine,
	manhattan,
	minkowski,

	nsUnit,
	us,
	µs,
	ms,

	updatePermissions,
	createPermissions,
	deletePermissions,
	selectPermissions,

	jwks,
	eddsa,
	es256,
	es384,
	es512,
	ps256,
	ps384,
	ps512,
	rs256,
	rs384,
	rs512,

	and,
	or,
	is,
	opNot,
	opIn,
	contains,
	containsnot,
	containsall,
	containsany,
	containsnone,
	inside,
	notinside,
	allinside,
	anyinside,
	noneinside,
	outside,
	intersects,

	hamming,
	levenshtein
} from "./parser.terms";

const tokenMap = {
	analyzer,
	any,
	as,
	asc,
	assert,
	at,
	begin,
	bm25,
	break: _break,
	by,
	cancel,
	capacity,
	changefeed,
	changes,
	columns,
	comment,
	commit,
	content,
	continue: _continue,
	create,
	database,
	db,
	default: _default,
	define,
	delete: _delete,
	desc,
	dimension,
	dist,
	doc_ids_cache,
	doc_ids_order,
	doc_lengths_cache,
	doc_lengths_order,
	drop,
	duplicate,
	else: _else,
	end,
	exists,
	explain,
	event,
	fetch,
	field,
	fields,
	flexible,
	for: _for,
	from,
	function: _function,
	group,
	highlights,
	if: _if,
	ignore,
	in: _in,
	index,
	info,
	insert,
	into,
	key,
	kill,
	let: _let,
	limit,
	live,
	merge,
	mtree,
	mtree_cache,
	namespace,
	noindex,
	normal,
	not,
	ns,
	on,
	only,
	order,
	out,
	parallel,
	param,
	passhash,
	password,
	patch,
	permissions,
	postings_cache,
	postings_order,
	readonly,
	relate,
	relation,
	remove,
	return: _return,
	roles,
	root,
	sc,
	scope,
	schemafull,
	schemaless,
	search,
	select,
	session,
	set,
	show,
	since,
	signin,
	signup,
	sleep,
	split,
	start,
	structure,
	tb,
	table,
	terms_cache,
	terms_order,
	then,
	throw: _throw,
	timeout,
	to,
	token,
	tokenizers,
	transaction,
	type,
	unique,
	unset,
	update,
	use,
	user,
	value,
	values,
	when,
	where,
	with: _with,

	// Literals
	after,
	before,
	diff,
	false: _false,
	full,
	none,
	null: _null,
	true: _true,

	f32,
	f64,
	i16,
	i32,
	i64,

	euclidean,
	cosine,
	manhattan,
	minkowski,

	ns,
	us,
	µs,
	ms,

	jwks,
	eddsa,
	es256,
	es384,
	es512,
	ps256,
	ps384,
	ps512,
	rs256,
	rs384,
	rs512,

	and,
	or,
	is,
	contains,
	containsnot,
	containsall,
	containsany,
	containsnone,
	inside,
	notinside,
	allinside,
	anyinside,
	noneinside,
	outside,
	intersects,

	hamming,
	levenshtein
};

const tryMapped = {
	select: [selectPermissions],
	create: [createPermissions],
	update: [updatePermissions],
	delete: [deletePermissions],
	ns: [nsUnit],
	not: [opNot],
	in: [opIn],
};

export const tokens = function(t, stack) {
	for (const tk of tryMapped[t.toLowerCase()] ?? []) {
		if (stack.canShift(tk)) return tk;
	}

	return tokenMap[t.toLowerCase()] ?? -1;
}
